  //////////////////////////////////////////////////////////////////////////////
 //                                                                           //
//                                                                            //
//                              C# Cheat Sheet                                //
//                                                                            //
//                                                                           //
//////////////////////////////////////////////////////////////////////////////


Conversion of an unmanaged to a managed array of structs
--------------------------------------------------------

  /// <summary>
  /// Méthode générique de conversion d'un pointeur sur une liste de
  /// structures non managées, en un tableau managé de structures.
  /// </summary>
  /// <typeparam name="Struct">Le type de la structure</typeparam>
  /// <param name="_P">Le pointeur vers le premier élément du tableau
  /// non managé.</param>
  /// <param name="_Size">La taille du tableau non managé.</param>
  /// <returns>Le tableau managé contenant les structures.</returns>
  Struct[] PtrToStructArray<Struct>(IntPtr _P, int _Size)
  {
    int nStructSize = Marshal.SizeOf(typeof(Struct));
    Struct[] array  = new Struct[_Size];
    IntPtr pWalker  = _P;

    for (int i=0; i<_Size; i++)
    {
      array[i] = (Struct)Marshal.PtrToStructure(pWalker, typeof(Struct));
      pWalker  += nStructSize;
    }

    return array;
  }


Boxing and unboxing of arrays (.NET 4)
--------------------------------------

  class Util
  {

    public static Array GetArrayAs(Type t_, Array array_)
    {
      int iDimensions = array_.Rank;
      int[] iSizes    = new int[iDimensions];
      int iCount      = array.Length;

      for (int i=0; i<iDimensions; ++i)
      {
        iSizes[i] = array.GetLength(i);
      }

      var aArray      = Array.CreateInstance(t_, iSizes);
      int[] iIndexes  = new int[iDimensions];

      for (int i=0; i<iCount; ++i)
      {
        int iDivider = 1;
        for (int j=0; j<iDimensions; ++j)
        {
          iIndexes[j] = i / iDivider % iSizes[j];
          iDivider *= iSizes[j];
        }

        aArray.SetValue(array_.GetValue(iIndexes), iIndexes);
      }

      return aArray;
    }

    public static dynamic Unbox(object o_)
    {
      dynamic dUnboxed = o_;

      if (o_.GetType().IsArray)
      {
        Array array             = (Array)o_;

        bool bIsEmpty           = true;
        bool bHasNullElement    = false;
        bool bHasHomogenousType = true;
        Type type               = null;

        foreach (object item in array)
        {
          bIsEmpty = false;

          if (item == null)
          {
            bHasNullElement = true;
            break;
          }
          else
          {
            if (type == null)
            {
              type = item.GetType();
            }
            else if (type != item.GetType())
            {
              bHasHomogenousType = false;
              break;
            }

          }
        }

        if (!bIsEmpty && !bHasNullElement && bHasHomogenousType)
        {
          dUnboxed = GetArrayAs(type, array);
        }
        else
        {
          dUnboxed = null;
        }
      }

      return dUnboxed;
    }

    public static object Objection(object o_)
    {
      object oObjected = o_;

      if (o_.GetType().IsArray)
      {
        oObjected = GetArrayAs(typeof(object), (Array)o);
      }

      return oObjected;
    }
  }